Description:

Multivariate complex Fourier transform, computed in place
	using mixed-radix Fast Fourier Transform algorithm.


Copyright:


Copyright(c)1995,97 Mark Olesen <olesen@me.QueensU.CA>
          Queen's Univ at Kingston (Canada)

Permission to use, copy, modify, and distribute this software for
any purpose without fee is hereby granted, provided that this
entire notice is included in all copies of any software which is
or includes a copy or modification of this software and in all
copies of the supporting documentation for such software.

THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
IMPLIED WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR QUEEN'S
UNIVERSITY AT KINGSTON MAKES ANY REPRESENTATION OR WARRANTY OF ANY
KIND CONCERNING THE MERCHANTABILITY OF THIS SOFTWARE OR ITS
FITNESS FOR ANY PARTICULAR PURPOSE.

All of which is to say that you can do what you like with this
source code provided you don't try to sell it as your own and you
include an unaltered copy of this message (including the
copyright).

It is also implicitly understood that bug fixes and improvements
should make their way back to the general Internet community so
that everyone benefits.


Fortran code by:
	RC Singleton, Stanford Research Institute, Sept. 1968
		NIST Guide to Available Math Software.
		Source for module FFT from package GO.
		Retrieved from NETLIB on Wed Jul  5 11:50:07 1995.
	translated by f2c (version 19950721) and with lots of cleanup
	to make it resemble C by:
		MJ Olesen, Queen's University at Kingston, 1995-97


Public API:


Brief overview of parameters:

Re[]:     real value array
Im[]:     imaginary value array
nTotal:   total number of complex values
nPass:    number of elements involved in this pass of transform
nSpan:    nspan/nPass = number of bytes to increment pointer in Re[] and Im[]
isign:    exponent: +1 = forward  -1 = reverse
scaling:  normalizing constant by which the final result is DIVIDED
	scaling == -1, normalize by total dimension of the transform
	scaling <  -1, normalize by the square-root of the total dimension


Slightly more detailed information:


void fft_free (void);

free-up allocated temporary storage after finished all the Fourier
transforms.


int fftn (int ndim, const int dims[], REAL Re[], REAL Im[],
	int iSign, double scaling);

NDIM = the total number dimensions
DIMS = a vector of array sizes
	if NDIM is zero then DIMS must be zero-terminated

RE and IM hold the real and imaginary components of the data, and
return the resulting real and imaginary Fourier coefficients.
Multidimensional data *must* be allocated contiguously.  There is
no limit on the number of dimensions.

ISIGN = the sign of the complex exponential
	(ie, forward or inverse FFT)
	the magnitude of ISIGN (normally 1) is used to determine
	the correct indexing increment (see below).

SCALING = normalizing constant by which the final result is DIVIDED
	if SCALING == -1, normalize by total dimension of the transform
	if SCALING <  -1, normalize by the square-root of the total dimension


Example:
	Tri-variate transform with Re[n3][n2][n1], Im[n3][n2][n1]

	int dims[3] = {n1,n2,n3}
	fftn (3, dims, Re, Im, 1, scaling);

or, using a null terminated dimension list
	int dims[4] = {n1,n2,n3,0}
	fftn (0, dims, Re, Im, 1, scaling);


Implementation details:


int fftradix (REAL Re[], REAL Im[], size_t nTotal, size_t nPass,
	size_t nSpan, int iSign, size_t maxFactors,
	size_t maxPerm);

RE and IM hold the real and imaginary components of the data, and
return the resulting real and imaginary Fourier coefficients.
Multidimensional data *must* be allocated contiguously.  There is
no limit on the number of dimensions.

Although there is no limit on the number of dimensions, fftradix()
must be called once for each dimension, but the calls may be in
any order.

NTOTAL = the total number of complex data values
NPASS  = the dimension of the current variable
NSPAN/NPASS = the spacing of consecutive data values while indexing
	the current variable
ISIGN - see above documentation


Example:
	Tri-variate transform with Re[n1][n2][n3], Im[n1][n2][n3]

	fftradix (Re, Im, n1*n2*n3, n1,       n1, 1, maxf, maxp);
	fftradix (Re, Im, n1*n2*n3, n2,    n1*n2, 1, maxf, maxp);
	fftradix (Re, Im, n1*n2*n3, n3, n1*n2*n3, 1, maxf, maxp);

single-variate transform,
	NTOTAL = N = NSPAN = (number of complex data values),

	fftradix (Re, Im, n, n, n, 1, maxf, maxp);

The data can also be stored in a single array with alternating
real and imaginary parts, the magnitude of ISIGN is changed to 2
to give correct indexing increment, and data [0] and data [1] used
to pass the initial addresses for the sequences of real and
imaginary values,


Example:

	REAL data [2*NTOTAL];
	fftradix (&data[0], &data[1], NTOTAL, nPass, nSpan, 2, maxf, maxp);

For temporary allocation:

MAXFACTORS	>= the maximum prime factor of NPASS
MAXPERM	>= the number of prime factors of NPASS.  In addition,
	if the square-free portion K of NPASS has two or more prime
	factors, then MAXPERM >= (K-1)

Storage in FACTOR for a maximum of 15 prime factors of NPASS. if
NPASS has more than one square-free factor, the product of the
square-free factors must be <= 210 array storage for maximum prime
factor of 23 the following two constants should agree with the
array dimensions.

